'use client'
import React, { useState } from 'react'
import Link from 'next/link'
import { registerApi, extractToken } from '../../../action/api'

export default function RegisterPage() {
  const [username, setUsername] = useState('adisorn.th')  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡∏≤‡∏° cURL
  const [email, setEmail]       = useState('adisorn.th@telecorpthailand.com')
  const [password, setPassword] = useState('11681168')
  const [confirm, setConfirm]   = useState('11681168')
  const [showPwd, setShowPwd]   = useState(false)
  const [loading, setLoading]   = useState(false)
  const [error, setError]       = useState(null)
  const [ok, setOk]             = useState(false)

  async function onSubmit(e) {
    e.preventDefault()
    setError(null); setOk(false)
    if (password !== confirm) {
      setError('‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô'); return
    }
    setLoading(true)
    try {
      const resp = await registerApi({ username: username.trim(), password, email: email.trim() })
      // ‡∏ö‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö register ‡πÅ‡∏•‡πâ‡∏ß login ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢; ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‡∏Å‡πá‡πÄ‡∏Å‡πá‡∏ö
      const token = extractToken(resp)
      if (token) localStorage.setItem('auth_token', token)
      if (resp?.user) localStorage.setItem('auth_user', JSON.stringify(resp.user))
      setOk(true)
      // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login ‡∏Å‡πá‡πÑ‡∏î‡πâ
      window.location.href = '/'
    } catch (err) {
      setError(err.message || '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-50 to-white flex items-center justify-center px-4">
      <div className="w-full max-w-md">
        <div className="rounded-2xl border bg-white shadow-sm">
          <div className="px-6 pt-6">
            <h1 className="text-2xl font-bold">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</h1>
            <p className="text-sm text-gray-500 mt-1">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
          </div>
          <form onSubmit={onSubmit} className="p-6 space-y-4">
            {error && (
              <div className="text-sm text-red-600 bg-red-50 border border-red-200 rounded-md px-3 py-2">
                {error}
              </div>
            )}

            <div>
              <label className="block text-sm font-medium">‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</label>
              <input
                className="mt-1 w-full rounded-lg border px-3 py-2 text-sm"
                placeholder="username"
                value={username}
                onChange={e => setUsername(e.target.value)}
                autoComplete="username"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</label>
              <input
                className="mt-1 w-full rounded-lg border px-3 py-2 text-sm"
                placeholder="email@example.com"
                type="email"
                value={email}
                onChange={e => setEmail(e.target.value)}
                autoComplete="email"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
              <div className="mt-1 flex rounded-lg border overflow-hidden">
                <input
                  className="w-full px-3 py-2 text-sm outline-none"
                  placeholder="password"
                  type={showPwd ? 'text' : 'password'}
                  value={password}
                  onChange={e => setPassword(e.target.value)}
                  autoComplete="new-password"
                  required
                />
                <button
                  type="button"
                  onClick={() => setShowPwd(v => !v)}
                  className="px-3 text-sm text-gray-600 hover:bg-gray-50"
                  aria-label="toggle password"
                >
                  {showPwd ? 'üôà' : 'üëÅÔ∏è'}
                </button>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium">‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</label>
              <input
                className="mt-1 w-full rounded-lg border px-3 py-2 text-sm"
                placeholder="confirm password"
                type={showPwd ? 'text' : 'password'}
                value={confirm}
                onChange={e => setConfirm(e.target.value)}
                autoComplete="new-password"
                required
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full rounded-lg bg-indigo-600 text-white py-2 text-sm font-medium hover:bg-indigo-700 disabled:opacity-60"
            >
              {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‚Ä¶' : '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'}
            </button>

            <div className="text-center text-sm text-gray-600">
              ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß?{' '}
              <Link href="/login" className="text-indigo-600 hover:underline">
                ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
              </Link>
            </div>
          </form>
        </div>
        {ok && (
          <div className="text-center text-xs text-green-700 bg-green-50 border border-green-200 rounded-md px-3 py-2 mt-3">
            ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‚Ä¶
          </div>
        )}
      </div>
    </div>
  )
}
